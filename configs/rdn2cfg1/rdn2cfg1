# Copyright (c) 2021-2022, ARM Limited and Contributors. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# Neither the name of ARM nor the names of its contributors may be used
# to endorse or promote products derived from this software without specific
# prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

source $DIR/configs/common/common.base

if [ "$BUILD_MACHINE_ARCH" == "x86_64" ]; then
	export CROSS_COMPILE_64=${TOP_DIR}/tools/gcc/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-
	export CROSS_COMPILE=$CROSS_COMPILE_64
	export LINUX_COMPILER=$CROSS_COMPILE_64
fi

BUILD_SCRIPTS=""

#Default linux configs per OS
LINUX_CONFIG_LIST=""
BUSYBOX_LINUX_CONFIG_LIST="defconfig"
BUILDROOT_LINUX_CONFIG_LIST="defconfig"
LINUXBOOT_LINUX_CONFIG_LIST="linuxboot_defconfig"

LINUX_TOOLS_IOMMU_BUILD=0

#Grub Build options
GRUB_BUILD_ENABLED=1
GRUB_PATH=grub
GRUB_BUILD_SCRIPT="build-grub.sh "
GRUB_PLAT_CONFIG_FILE=${TOP_DIR}/build-scripts/configs/rdn2cfg1/grub_config/rdn2cfg1.cfg

# ARM_TF Flags
ARM_TF_PLATS="rdn2"
ARM_TF_DEBUG_ENABLED=1
ARM_TF_ENABLE_SPM=1
ARM_TF_RAS_FW_FIRST=1
ARM_TF_BL31_IN_DRAM=1
ARM_TF_BUILD_FLAGS=""
ARM_TF_BUILD_VARIANT="rdn2cfg1"

# Enable support for secure partition, partition manager and RAS.
if [ "$ARM_TF_ENABLE_SPM" == "1" ]; then
	ARM_TF_BUILD_FLAGS="$ARM_TF_BUILD_FLAGS SPM_MM=$ARM_TF_ENABLE_SPM"
	ARM_TF_BUILD_FLAGS="$ARM_TF_BUILD_FLAGS EL3_EXCEPTION_HANDLING=$ARM_TF_ENABLE_SPM"
	if [ "$ARM_TF_RAS_FW_FIRST" == "1" ]; then
		ARM_TF_BUILD_FLAGS="$ARM_TF_BUILD_FLAGS RAS_EXTENSION=1 SDEI_SUPPORT=1 HANDLE_EA_EL3_FIRST=1"
	fi
fi

# Place BL31 to SRAM/DRAM based on ARM_BL31_IN_DRAM flag
ARM_TF_BUILD_FLAGS="$ARM_TF_BUILD_FLAGS ARM_BL31_IN_DRAM=$ARM_TF_BL31_IN_DRAM"

ARM_TF_BUILD_FLAGS="$ARM_TF_BUILD_FLAGS CSS_SGI_PLATFORM_VARIANT=1"

# Filesystem options
VALID_FILESYSTEMS="busybox buildroot linuxboot"

# Virtualization Options
ARM_VIRT_KVM_TOOL=1
KVMTOOL_BUILD_ENABLED=1
KVM_UNIT_TESTS_BUILD_ENABLED=1
KVMTOOL_SUPPORT_PLATFORM="rdn2"
if [ "${KVMTOOL_BUILD_ENABLED}" == "1" ] ||
	[ "${KVM_UNIT_TESTS_BUILD_ENABLED}" == "1" ]; then
	BUILD_SCRIPTS="${BUILD_SCRIPTS} build-kvmtool.sh"
fi

#UEFI Options.
UEFI_BUILD_ENABLED=1
UEFI_PLATFORMS="rdn2cfg1"
if [ "$ARM_TF_ENABLE_SPM" == "1" ]; then
	UEFI_PLATFORMS="$UEFI_PLATFORMS rdn2cfg1_mm_standalone"
fi
if [ "$ARM_VIRT_KVM_TOOL" == "1" ]; then
	UEFI_PLATFORMS="$UEFI_PLATFORMS ArmVirtKvmTool"
fi
declare -A UEFI_PLAT_rdn2cfg1
UEFI_PLAT_rdn2cfg1[platname]="RdN2Cfg1"
UEFI_PLAT_rdn2cfg1[dsc]="Platform/ARM/SgiPkg/RdN2Cfg1/RdN2Cfg1.dsc"
UEFI_PLAT_rdn2cfg1[output]=css-common
UEFI_PLAT_rdn2cfg1[defines]="-D EDK2_PLAT=rdn2cfg1 -D VALIDATION_LVL=$VALIDATION_LVL"
if [ "$ARM_TF_RAS_FW_FIRST" == "1" ]; then
	UEFI_PLAT_rdn2cfg1[defines]="${UEFI_PLAT_rdn2cfg1[defines]} -D EDK2_ENABLE_GHES_MM -D EDK2_ENABLE_FIRMWARE_FIRST -D EDK2_ERROR_INJ_EN"
fi
UEFI_PLAT_rdn2cfg1[defines]="${UEFI_PLAT_rdn2cfg1[defines]} -D EDK2_ENABLE_RAS=$ARM_TF_RAS_FW_FIRST"
UEFI_PLAT_rdn2cfg1[binary]="BL33_AP_UEFI.fd"
UEFI_PLAT_rdn2cfg1[outbin]=uefi.bin

declare -A UEFI_PLAT_ArmVirtKvmTool
UEFI_PLAT_ArmVirtKvmTool[platname]="ArmVirtKvmTool"
UEFI_PLAT_ArmVirtKvmTool[dsc]="ArmVirtPkg/ArmVirtKvmTool.dsc"
UEFI_PLAT_ArmVirtKvmTool[output]=css-common
UEFI_PLAT_ArmVirtKvmTool[binary]="KVMTOOL_EFI.fd"
UEFI_PLAT_ArmVirtKvmTool[outbin]="KVMTOOL_EFI.bin"
UEFI_PLAT_ArmVirtKvmTool[defines]="${UEFI_PLAT_ArmVirtKvmTool[defines]} -D EDK2_OUT_DIR=Build/ArmVirtKvmTool"

#Standalone MM Build Options
UEFI_MM_BUILD_ENABLED=$ARM_TF_ENABLE_SPM
declare -A UEFI_PLAT_rdn2cfg1_mm_standalone
UEFI_PLAT_rdn2cfg1_mm_standalone[platname]="SgiMmStandalone"
UEFI_PLAT_rdn2cfg1_mm_standalone[dsc]="Platform/ARM/SgiPkg/PlatformStandaloneMm2.dsc"
UEFI_PLAT_rdn2cfg1_mm_standalone[output]=css-common
if [ "$ARM_TF_RAS_FW_FIRST" == "1" ]; then
	UEFI_PLAT_rdn2cfg1_mm_standalone[defines]="-D EDK2_ENABLE_GHES_MM -D EDK2_ENABLE_CPU_MM"
fi
UEFI_PLAT_rdn2cfg1_mm_standalone[binary]="BL32_AP_MM.fd"
UEFI_PLAT_rdn2cfg1_mm_standalone[outbin]=mm_standalone.bin
UEFI_MM_PAYLOAD_BIN="mm_standalone.bin"

#SCP options
SCP_BUILD_ENABLED=1
SCP_PLATFORMS="rdn2"
SCP_BUILD_MODE=Debug
SCP_PLATFORM_VARIANT=1
SCP_PRODUCT_BUILD_PARAMS="PLATFORM_VARIANT=$SCP_PLATFORM_VARIANT"
if [ "$BUILD_MACHINE_ARCH" == "x86_64" ]; then
	SCP_COMPILER_PATH=$TOP_DIR/tools/gcc/gcc-arm-11.2-2022.02-x86_64-arm-none-eabi/bin
fi

# Buildroot options
BUILDROOT_DEFCONFIG=aarch64_rdinfra_defconfig

# Misc options
COMPONENT_FLAVOUR=rdn2cfg1

TARGET_BINS_PLATS="rdn2cfg1"
declare -A TARGET_rdn2cfg1
TARGET_rdn2cfg1[arm-tf]="rdn2"
TARGET_rdn2cfg1[output]="rdn2cfg1"
TARGET_rdn2cfg1[uefi]="css-common"
TARGET_rdn2cfg1[linux]="Image"
TARGET_rdn2cfg1[ramdisk]=0x88000000
TARGET_rdn2cfg1[tbbr]=1
TARGET_rdn2cfg1[scp]="rdn2"
SCP_BYPASS_ROM_SUPPORT[rdn2]=false
BUILD_SCRIPTS="${BUILD_SCRIPTS} build-scp.sh build-arm-tf.sh build-uefi.sh build-linux.sh build-busybox.sh build-buildroot.sh build-grub.sh build-target-bins.sh "

# UEFI SCT Options
SCT_OUT_DIR=$TOP_DIR/output/rdn2cfg1/uefisct
SCT_BUILD_MODE=DEBUG

# Linuxboot Options
LINUXBOOT_BUILD_ENABLED=0
if [ "$LINUXBOOT_BUILD_ENABLED" == "1" ]; then
	BUILD_SCRIPTS="${BUILD_SCRIPTS} build-scp.sh build-arm-tf.sh build-uefi.sh build-linux.sh build-busybox.sh build-target-bins.sh "
fi
